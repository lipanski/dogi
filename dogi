#!/bin/sh

VERSION="0.3.0"

HELP="
dogi

A simple way to deploy your pet projects using Docker, Git, Caddy and SSH.

dogi create  # Create a new application
dogi deploy  # Deploy an application
dogi env     # View or edit environment variables for an application
dogi logs    # Show and follow the logs for an application
dogi remove  # Remove an existing application
dogi setup   # Set up dogi (only useful if you're performing a manual upgrade)
dogi version # Print the version
dogi help    # Show this help message
"

HELP_CREATE="
dogi create

Creates a new application.

Usage:
  dogi create -n [APP NAME] -d [APP DOMAIN] -p [APP PORT]

Usage over SSH:
  ssh -t user@server dogi create -n [APP NAME] -d [APP DOMAIN] -p [APP PORT]

Options:
  -n  # The application name (required)
  -d  # The domains, separated by a space, which will be used to serve the application (required if a port was provided)
  -p  # The container port exposed by your application (required if a domain was provided)
  -o  # Additional options to pass to 'docker run' (defaults to '--net=host')
  -f  # Don't prompt for confirmation and use default directories
  -h  # Show this message
"

HELP_DEPLOY="
dogi deploy

Deploys an application without code changes. If there have been code changes since the previous
release, use the 'git push' deployment method to include them.

Usage:
  dogi deploy -n [APP NAME]

Usage over SSH:
  ssh -t user@server dogi deploy -n [APP NAME]

Options:
  -n  # The application name (required)
  -h  # Show this message
"

HELP_ENV="
dogi env

View or edit environment variables for an application.

Usage:
  dogi env -n [APP NAME]

Usage over SSH:
  ssh -t user@server dogi env -n [APP NAME]

Options:
  -n  # The application name (required)
  -h  # Show this message
"

HELP_LOGS="
dogi logs

Show and follow the logs for an application.

Usage:
  dogi logs -n [APP NAME]

Usage over SSH:
  ssh -t user@server dogi logs -n [APP NAME]

Options:
  -n  # The application name (required)
  -h  # Show this message
"

HELP_REMOVE="
dogi remove

Removes an application entirely.

Usage:
  dogi remove -n [APP NAME]

Usage over SSH:
  ssh -t user@server dogi remove -n [APP NAME]

Options:
  -n  # The application name (required)
  -h  # Show this message
"

DEPLOY_SCRIPT='#!/bin/sh

set -eu

APPS_DIR="%s"
APP_NAME="%s"
APP_DOMAIN="%s"
APP_PORT="%s"
DOCKER_OPTS="%s"

echo "### Checking out the code..."
cd $APPS_DIR/$APP_NAME/git
GIT_WORK_TREE=$APPS_DIR/$APP_NAME/app git checkout -f

echo "### Building the image..."
docker build -t $APP_NAME $APPS_DIR/$APP_NAME/app

echo "### Stopping the previously running instance..."
docker stop $APP_NAME 2>&1 | xargs docker rm > /dev/null 2>&1 || echo "### Nothing to stop: no previous instance was running"

echo "### Starting the application..."
docker run --name $APP_NAME \
  -d --restart unless-stopped \
  --env-file $APPS_DIR/$APP_NAME/env \
  $DOCKER_OPTS \
  $APP_NAME

if [ -n "$APP_DOMAIN" ] && [ -n "$APP_PORT" ]; then
  APP_DOMAINS=$(echo $APP_DOMAIN | sed "s/\s/\",\"/")
  echo "### Registering the application on Caddy as \"$APP_DOMAINS\"..."
  curl -fs -XPATCH "http://localhost:2019/id/route-$APP_NAME/" \
    -H "content-type: application/json" \
    -d "{\"@id\":\"route-$APP_NAME\",\"match\":[{\"host\":[\"$APP_DOMAINS\"]}],\"handle\":[{\"handler\":\"reverse_proxy\",\"upstreams\":[{\"@id\":\"upstream-$APP_NAME\",\"dial\":\":$APP_PORT\"}]}]}"
fi

echo "### Cleaning up unused containers and images..."
docker container prune -f --filter "until=168h"
docker image prune -a -f --filter "until=168h"

echo "### Your app $APP_NAME was deployed successfully."
'

CADDY_IMAGE="caddy/caddy:2.1.1-alpine"
DEFAULT_CADDY_DIR="$HOME/.caddy"
APPS_DIR="$HOME/apps"
DOCKER_OPTS="--net=host"
FORCE=false

setup(){
  if ! command -v docker > /dev/null; then
    echo "### You need to install Docker on the host machine before proceeding."
    exit 1
  fi

  if ! command -v curl > /dev/null; then
    echo "### You need to install curl on the host machine before proceeding."
    exit 1
  fi

  if id -nG "$USER" | grep -vqwE "docker|root"; then
    echo "### The user '$USER' does not belong to the 'docker' group. Run 'sudo usermod -a -G docker $USER' to fix this."
    exit 1
  fi

  if test -z "$(docker ps -qf name=caddy)"; then
    echo "### Starting Caddy..."

    [ "$FORCE" = true ] || printf "### Where should Caddy store data and configuration? ($DEFAULT_CADDY_DIR) "; read -r CADDY_DIR
    [ -z "$CADDY_DIR" ] && CADDY_DIR=$DEFAULT_CADDY_DIR
    mkdir -p "$CADDY_DIR/data" "$CADDY_DIR/config"

    docker run --name caddy \
      -d --restart unless-stopped \
      --net=host --cap-add=cap_net_bind_service \
      -v "$CADDY_DIR/data:/data" -v "$CADDY_DIR/config:/config" \
      $CADDY_IMAGE caddy run -resume

    # Give caddy some time to resume before we apply the default configuration in the next step
    sleep 10
  fi

  if test "$(curl -fs http://localhost:2019/config/)" = "null" || test "$(curl -fs http://localhost:2019/config/apps/http/servers/default/)" = "null"; then
    echo "### Setting up default Caddy configuration..."
    curl -fs http://localhost:2019/config/ \
      -H "content-type: application/json" \
      -d '{"apps":{"http":{"servers":{"default":{"listen":[":80",":443"],"routes":[]}}}}}'
  fi
}

create(){
  [ "$HELP_REQUESTED" = true ] || [ -z "$APP_NAME" ] && { echo "$HELP_CREATE"; exit 1; }
  [ -z "$APP_DOMAIN" ] && [ -n "$APP_PORT" ] && { echo "$HELP_CREATE"; exit 1; }
  [ -n "$APP_DOMAIN" ] && [ -z "$APP_PORT" ] && { echo "$HELP_CREATE"; exit 1; }

  setup

  echo "### Creating application '$APP_NAME' with domain '$APP_DOMAIN' running on port '$APP_PORT'"
  [ "$FORCE" = true ] || { printf "### Are you sure? (y/n) "; read -r CONFIRM; [ "$CONFIRM" != "y" ] && exit 1; }

  echo "### Setting up directories and files..."
  mkdir -p "$APPS_DIR/$APP_NAME/git" "$APPS_DIR/$APP_NAME/app"
  [ ! -f "$APPS_DIR/$APP_NAME/env" ] && echo "# Place your environment variables here" > "$APPS_DIR/$APP_NAME/env"
  printf "$DEPLOY_SCRIPT" "$APPS_DIR" "$APP_NAME" "$APP_DOMAIN" "$APP_PORT" "$DOCKER_OPTS" > "$APPS_DIR/$APP_NAME/deploy"
  chmod +x "$APPS_DIR/$APP_NAME/deploy"

  echo "### Setting up git repository..."
  [ ! -f "$APPS_DIR/$APP_NAME/git/HEAD" ] && git init --bare "$APPS_DIR/$APP_NAME/git" > /dev/null
  ln -sf "$APPS_DIR/$APP_NAME/deploy" "$APPS_DIR/$APP_NAME/git/hooks/post-update"

  if test -z "$(curl -fs "http://localhost:2019/id/route-$APP_NAME")"; then
    echo "### Configuring Caddy..."
    curl -fs http://localhost:2019/config/apps/http/servers/default/routes/ \
      -H "content-type: application/json" \
      -d "{\"@id\":\"route-$APP_NAME\"}"
  fi

  echo "### Application created successfully."

  SSH_COMMAND="[SSH USER]@[SSH SERVER]"
  SSH_SERVER=$(echo "$SSH_CONNECTION" | cut -d' ' -f3)
  [ -n "$SSH_SERVER" ] && SSH_COMMAND="$USER@$SSH_SERVER"
  echo "### Run 'git remote add dogi $SSH_COMMAND:$APPS_DIR/$APP_NAME/git' to connect your local git repository to dogi."
}

deploy(){
  [ "$HELP_REQUESTED" = true ] || [ -z "$APP_NAME" ] && { echo "$HELP_DEPLOY"; exit 1; }

  "$APPS_DIR/$APP_NAME/deploy"
}

env(){
  [ "$HELP_REQUESTED" = true ] || [ -z "$APP_NAME" ] && { echo "$HELP_ENV"; exit 1; }

  edit "$APPS_DIR/$APP_NAME/env"
}

logs(){
  [ "$HELP_REQUESTED" = true ] || [ -z "$APP_NAME" ] && { echo "$HELP_LOGS"; exit 1; }

  docker logs -f "$APP_NAME"
}

remove(){
  [ "$HELP_REQUESTED" = true ] || [ -z "$APP_NAME" ] && { echo "$HELP_REMOVE"; exit 1; }

  echo "### This will remove application '$APP_NAME' entirely, including the remote Git repository"
  [ "$FORCE" = true ] || { printf "### Are you sure? (y/n) "; read -r CONFIRM; [ "$CONFIRM" != "y" ] && exit 1; }

  echo "### Stopping the previously running instance..."
  docker stop "$APP_NAME" 2>&1 | xargs docker rm > /dev/null 2>&1 || echo "### Nothing to stop: no previous instance was running"

  echo "### Unregistering the application on Caddy..."
  curl -fs -XDELETE "http://localhost:2019/id/route-$APP_NAME/"

  echo "### Removing directories and files..."
  rm -rf "${APPS_DIR:?}/${APP_NAME:?}"
}

ACTION=$1 && [ $# -ne 0 ] && shift

while getopts "n:d:p:o:fh" OPTION
do
  case $OPTION in
    n)
      APP_NAME=$OPTARG
      echo "$APP_NAME" | grep -vqE "^[a-zA-Z0-9_]+$" && { echo "### The name argument may only contain letters, numbers or underscore"; exit 1; }
      ;;
    d)
      APP_DOMAIN=$OPTARG
      ;;
    p)
      APP_PORT=$OPTARG
      echo "$APP_PORT" | grep -vqE "^[0-9]+$" && { echo "### The port argument may only contain numbers"; exit 1; }
      ;;
    o)
      DOCKER_OPTS=$OPTARG
      ;;
    f)
      FORCE=true
      ;;
    h | *)
      HELP_REQUESTED=true
      ;;
  esac
done

case "$ACTION" in
  setup)
    setup;;
  create)
    create;;
  deploy)
    deploy;;
  env)
    env;;
  logs)
    logs;;
  remove)
    remove;;
  version)
    echo "$VERSION"; exit 0;;
  help | *)
    echo "$HELP"; exit 1;;
esac
