#!/bin/sh

HELP="
dogi

A simple way to deploy your pet projects using Docker, Git and Caddy

dogi create  # Create a new application
dogi deploy  # Deploy an application
dogi env     # View or edit environment variables for an application
dogi remove  # Remove an existing application
dogi help    # Show this help message
"

HELP_CREATE="
dogi create

Creates a new application

Usage:
  dogi create -n [APP NAME] -d [APP DOMAIN] -p [APP PORT]

Options:
  -n  # The application name (REQUIRED)
  -d  # The domain under which the application will be made available (REQUIRED)
  -p  # The container port exposed by your application (REQUIRED)
  -f  # Don't prompt for confirmation and use default directories
  -h  # Show this message
"

HELP_DEPLOY="
dogi deploy

Deploy an application

Usage:
  dogi deploy -n [APP NAME]

Options:
  -n  # The application name (REQUIRED)
  -h  # Show this message
"

HELP_ENV="
dogi env

View or edit environment variables for an application

Usage:
  dogi env -n [APP NAME]

Options:
  -n  # The application name (REQUIRED)
  -h  # Show this message
"

HELP_REMOVE="
dogi remove

Remove an existing application

Usage:
  dogi remove -n [APP NAME]

Options:
  -n  # The application name (REQUIRED)
  -h  # Show this message
"

DEPLOY_SCRIPT='#!/bin/sh

set -eu

APP_NAME="%s"
APP_DOMAIN="%s"
APP_PORT="%s"
APPS_DIR="%s"

echo "### Checking out the code..."
cd $APPS_DIR/$APP_NAME/git
GIT_WORK_TREE=$APPS_DIR/$APP_NAME/app git checkout -f

echo "### Building the image..."
docker build -t $APP_NAME $APPS_DIR/$APP_NAME/app

echo "### Stopping the old instance..."
docker stop $APP_NAME 2>&1 | xargs docker rm > /dev/null 2>&1 || echo "### Nothing to stop: no previous instance was running"

echo "### Starting the application..."
docker run --name $APP_NAME \
  -d --restart unless-stopped \
  -p 127.0.0.1:$APP_PORT:$APP_PORT \
  --add-host=parent:172.17.0.1 \
  --env-file $APPS_DIR/$APP_NAME/env \
  $APP_NAME

echo "### Registering the application on Caddy..."
curl -fs -XPATCH "http://localhost:2019/id/route-$APP_NAME/" \
  -H "content-type: application/json" \
  -d "{\"@id\":\"route-$APP_NAME\",\"match\":[{\"host\":[\"$APP_DOMAIN\"]}],\"handle\":[{\"handler\":\"reverse_proxy\",\"upstreams\":[{\"@id\":\"upstream-$APP_NAME\",\"dial\":\":$APP_PORT\"}]}]}"

echo "### Cleaning up unused containers and images..."
docker container prune -f --filter "until=168h"
docker image prune -a -f --filter "until=168h"

echo "### Your app $APP_NAME was deployed successfully."
'

CADDY_IMAGE="caddy/caddy:2.0.0-beta.20-alpine"
APPS_DIR="$HOME/.dogi"
DEFAULT_CADDY_DIR="$HOME/.caddy"
FORCE=false

setup(){
  if ! command -v docker > /dev/null; then
    echo "### You need to install Docker on the host machine before proceeding."
    exit 1
  fi

  if id -nG "$USER" | grep -vqw "docker\|root"; then
    echo "### The user '$USER' does not belong to the 'docker' group. Run 'sudo usermod -a -G docker $USER' to fix this."
    exit 1
  fi

  if test -z "$(docker ps -qf name=caddy)"; then
    echo "### Starting Caddy..."

    [ "$FORCE" = true ] || read -p "### Where should Caddy store data and configuration? ($DEFAULT_CADDY_DIR) " CADDY_DIR
    [ -z "$CADDY_DIR" ] && CADDY_DIR=$DEFAULT_CADDY_DIR
    mkdir -p $CADDY_DIR/data $CADDY_DIR/config

    docker run --name caddy \
      -d --restart unless-stopped \
      --net=host --cap-add=cap_net_bind_service \
      -v $CADDY_DIR/data:/data -v $CADDY_DIR/config:/config \
      $CADDY_IMAGE caddy run -resume

    sleep 5
  fi

  if test "$(curl -fs http://localhost:2019/config/)" = "null" || test "$(curl -fs http://localhost:2019/config/apps/http/servers/default/)" = "null"; then
    echo "### Setting up default Caddy configuration..."
    curl -fs http://localhost:2019/config/ \
      -H "content-type: application/json" \
      -d '{"apps":{"http":{"servers":{"default":{"listen":[":80",":443"],"routes":[]}}}}}'
  fi
}

create(){
  [ -z "$APP_NAME" ] || [ -z "$APP_DOMAIN" ] || [ -z "$APP_PORT" ] && { echo "$HELP_CREATE"; exit 1; }

  setup

  echo "### Creating application '$APP_NAME' with domain '$APP_DOMAIN' running on port '$APP_PORT'"
  [ "$FORCE" = true ] || { read -p "### Are you sure? (y/n) " CONFIRM; [ "$CONFIRM" != "y" ] && exit 1; }

  echo "### Setting up directories and files..."
  mkdir -p $APPS_DIR/$APP_NAME/git $APPS_DIR/$APP_NAME/app
  [ ! -f "$APPS_DIR/$APP_NAME/env" ] && touch $APPS_DIR/$APP_NAME/env
  printf "$DEPLOY_SCRIPT" "$APP_NAME" "$APP_DOMAIN" "$APP_PORT" "$APPS_DIR" > $APPS_DIR/$APP_NAME/deploy
  chmod +x $APPS_DIR/$APP_NAME/deploy

  echo "### Setting up git repository..."
  [ ! -f "$APPS_DIR/$APP_NAME/git/HEAD" ] && git init --bare $APPS_DIR/$APP_NAME/git
  ln -sf $APPS_DIR/$APP_NAME/deploy $APPS_DIR/$APP_NAME/git/hooks/post-update

  if test -z "$(curl -fs http://localhost:2019/id/route-$APP_NAME)"; then
    echo "### Configuring Caddy..."
    curl -fs http://localhost:2019/config/apps/http/servers/default/routes/ \
      -H "content-type: application/json" \
      -d "{\"@id\":\"route-$APP_NAME\"}"
  fi

  echo "### Application created successfully."
  echo "### Run 'git remote add dogi $USER@$(echo "$SSH_CONNECTION" | cut -d' ' -f3):$APPS_DIR/$APP_NAME/git' from your local repository."
}

deploy(){
  [ -z "$APP_NAME" ] && { echo "$HELP_DEPLOY"; exit 1; }

  $APPS_DIR/$APP_NAME/deploy
}

env(){
  [ -z "$APP_NAME" ] && { echo "$HELP_ENV"; exit 1; }

  edit $APPS_DIR/$APP_NAME/env
}

remove(){
  [ -z "$APP_NAME" ] && { echo "$HELP_REMOVE"; exit 1; }

  echo "### This will remove application '$APP_NAME' entirely, including the remote Git repository"
  [ "$FORCE" = true ] || { read -p "### Are you sure? (y/n) " CONFIRM; [ "$CONFIRM" != "y" ] && exit 1; }

  echo "### Stopping the old instance..."
  docker stop $APP_NAME 2>&1 | xargs docker rm > /dev/null 2>&1 || echo "### Nothing to stop: no previous instance was running"

  echo "### Unregistering the application on Caddy..."
  curl -fs -XDELETE "http://localhost:2019/id/route-$APP_NAME/"

  echo "### Removing directories and files..."
  rm -rf $APPS_DIR/$APP_NAME
}

ACTION=$1
[ $# -ne 0 ] && shift

while getopts "n:d:p:fh" OPTION
do
  case $OPTION in
    n)
      APP_NAME=$OPTARG;;
    d)
      APP_DOMAIN=$OPTARG;;
    p)
      APP_PORT=$OPTARG;;
    f)
      FORCE=true;;
    h | *)
      echo "$HELP"; exit 1;;
  esac
done

case "$ACTION" in
  create)
    create;;
  deploy)
    deploy;;
  env)
    env;;
  remove)
    remove;;
  help | *)
    echo "$HELP"; exit 1;;
esac
