#!/bin/sh

HELP="
dogi

dogi create  # Create a new application
dogi deploy  # Deploy an application
dogi env     # View or edit environment variables for an application
dogi remove  # Remove an existing application
dogi help    # Show this help message
"

HELP_CREATE="
dogi create

Create a new application

Usage:
  dogi create -n [APP NAME] -d [APP DOMAIN] -p [APP PORT]

Options:
  -n  # The application name (REQUIRED)
  -d  # The domain under which the application will be made available (REQUIRED)
  -p  # The container port exposed by your application (REQUIRED)
  -h  # Show this message
"

HELP_DEPLOY="
dogi deploy

Deploy an application

Usage:
  dogi deploy -n [APP NAME]

Options:
  -n  # The application name (REQUIRED)
  -h  # Show this message
"

HELP_ENV="
dogi env

View or edit environment variables for an application

Usage:
  dogi env -n [APP NAME]

Options:
  -n  # The application name (REQUIRED)
  -h  # Show this message
"

HELP_REMOVE="
dogi remove

Remove an existing application

Usage:
  dogi remove -n [APP NAME]

Options:
  -n  # The application name (REQUIRED)
  -h  # Show this message
"

DEPLOY_SCRIPT='#!/bin/sh

set -eu

APP_NAME=%s
APP_DOMAIN=%s
APP_PORT=%s

echo "### Checking out the code..."
cd /srv/$APP_NAME/git
GIT_WORK_TREE=/srv/$APP_NAME/app git checkout -f

echo "### Building the image..."
docker build -t $APP_NAME /srv/$APP_NAME/app

echo "### Stopping the old instance..."
docker stop $APP_NAME 2>&1 | xargs docker rm > /dev/null 2>&1 || echo "### Nothing to stop: no previous instance was running"

echo "### Starting the application..."
docker run --name $APP_NAME \
  -d --restart unless-stopped \
  -p 127.0.0.1:$APP_PORT:$APP_PORT \
  --add-host=parent:172.17.0.1 \
  --env-file /srv/$APP_NAME/env \
  $APP_NAME

echo "### Registering the application on Caddy..."
curl -fs -XPATCH "http://localhost:2019/id/route-$APP_NAME/" \
  -H "content-type: application/json" \
  -d "{\"@id\":\"route-$APP_NAME\",\"match\":[{\"host\":[\"$APP_DOMAIN\"]}],\"handle\":[{\"handler\":\"reverse_proxy\",\"upstreams\":[{\"@id\":\"upstream-$APP_NAME\",\"dial\":\":$APP_PORT\"}]}]}"

echo "### Cleaning up unused containers and images..."
docker container prune -f --filter "until=168h"
docker image prune -a -f --filter "until=168h"

echo "### Your app $APP_NAME was deployed successfully."
'

create(){
  [ -z "$APP_NAME" ] || [ -z "$APP_DOMAIN" ] || [ -z "$APP_PORT" ] && { echo "$HELP_CREATE"; exit 1; }

  echo "### Creating application '$APP_NAME' with domain '$APP_DOMAIN' running on port '$APP_PORT'"
  read -p "### Are you sure? (y/n) " CONFIRM
  [ "$CONFIRM" != "y" ] && exit 1

  echo "### Setting up directories and files..."
  mkdir -p /srv/$APP_NAME/git /srv/$APP_NAME/app
  [ ! -f "/srv/$APP_NAME/env" ] && touch /srv/$APP_NAME/env
  [ ! -f "/srv/$APP_NAME/git/HEAD" ] && git init --bare /srv/$APP_NAME/git
  printf "$DEPLOY_SCRIPT" "$APP_NAME" "$APP_DOMAIN" "$APP_PORT" > /srv/$APP_NAME/deploy
  chmod +x /srv/$APP_NAME/deploy
  [ ! -f "/srv/$APP_NAME/git/hooks/post-update" ] && ln -s /srv/$APP_NAME/deploy /srv/$APP_NAME/git/hooks/post-update

  echo "### Application created successfully."
}

deploy(){
  [ -z "$APP_NAME" ] && { echo "$HELP_DEPLOY"; exit 1; }

  /srv/$APP_NAME/deploy
}

env(){
  [ -z "$APP_NAME" ] && { echo "$HELP_ENV"; exit 1; }

  edit /srv/$APP_NAME/env
}

remove(){
  [ -z "$APP_NAME" ] && { echo "$HELP_REMOVE"; exit 1; }

  echo "### NOT IMPLEMENTED"
}

ACTION=$1
[ $# -ne 0 ] && shift

while getopts "n:d:p:h" OPTION
do
  case $OPTION in
    n)
      APP_NAME=$OPTARG
      ;;
    d)
      APP_DOMAIN=$OPTARG
      ;;
    p)
      APP_PORT=$OPTARG
      ;;
    h | *)
      echo "$HELP"; exit 1;;
  esac
done

case "$ACTION" in
  create)
    create;;
  deploy)
    deploy;;
  env)
    env;;
  remove)
    remove;;
  help | *)
    echo "$HELP"; exit 1;;
esac
